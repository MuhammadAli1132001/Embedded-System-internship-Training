C51 COMPILER V9.60.7.0   MAIN                                                              08/31/2023 16:34:47 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          #include "lcd.h"
   4          #include <stdio.h>
   5          
   6          
   7          #define EEPROM_ADDRESS 0xA0
   8          
   9          sbit SDA = P2^0; // I2C Data pin
  10          sbit SCL = P2^1; // I2C Clock pin
  11          
  12          sbit disp_1 = P2^2;
  13          sbit disp_2 = P2^3;
  14          sbit disp_3 = P2^4;
  15          sbit disp_4 = P2^5;
  16          
  17          typedef unsigned char uchar;
  18          typedef unsigned int iint;
  19          typedef unsigned long ulong;
  20          
  21          void I2C_Init();
  22          void I2C_Start();
  23          void I2C_Stop();
  24          void I2C_Write(uchar dat);
  25          unsigned char I2C_ReadACK();
  26          
  27          void EEPROM_WriteByte(uchar address,uchar Data);
  28          void EEPROM_Write4Byte(uchar address,uchar Data);
  29          
  30          unsigned char EEPROM_ReadByte(uchar address);
  31          unsigned long EEPROM_Read4Byte(uchar address);
  32          
  33          ulong countValue = 0;
  34          uchar counterLow = 0;
  35          uchar counterHigh = 0;
  36          
  37          // I2C Start condition
  38          void I2C_Start() {
  39   1          SDA = 1;
  40   1          _nop_();
  41   1          SCL = 1;
  42   1          _nop_();
  43   1          SDA = 0;
  44   1          _nop_();
  45   1          SCL = 0;
  46   1          _nop_();_nop_();
  47   1      
  48   1      }
  49          
  50          // I2C Stop condition
  51          void I2C_Stop() {
  52   1         
  53   1          SDA = 0;
  54   1          _nop_();_nop_();
C51 COMPILER V9.60.7.0   MAIN                                                              08/31/2023 16:34:47 PAGE 2   

  55   1      
  56   1          SCL = 1;
  57   1          _nop_();_nop_();
  58   1      
  59   1          SDA = 1;
  60   1          _nop_();_nop_();
  61   1      
  62   1      }
  63          
  64          // I2C Initialization
  65          void I2C_Init(){
  66   1        
  67   1          I2C_Start(); 
  68   1          I2C_Stop();
  69   1        
  70   1      }
  71          
  72          
  73          void I2C_Write(unsigned char dat) {
  74   1          unsigned char i;
  75   1        
  76   1          for (i = 0; i < 8; i++) {
  77   2              SDA = (dat & 0x80) ? 1 : 0;
  78   2              _nop_();  _nop_();
  79   2      
  80   2              SCL = 1;
  81   2              _nop_();
  82   2              SCL = 0;
  83   2              _nop_();      
  84   2      
  85   2              SCL = 0;
  86   2              dat <<= 1;
  87   2      
  88   2          }
  89   1      
  90   1          // Wait for ACK from the slave
  91   1          SDA = 1;
  92   1          _nop_();
  93   1          SCL = 1;
  94   1          _nop_();
  95   1          SCL = 0;
  96   1      }
  97          
  98          unsigned char I2C_ReadACK() {
  99   1          uchar i, dat = 0;
 100   1          
 101   1          SDA = 1;
 102   1          for (i = 0; i < 8; i++) {
 103   2              _nop_();
 104   2              SCL = 1;
 105   2              _nop_();
 106   2              dat = (dat << 1) | SDA;
 107   2              SCL = 0;
 108   2          }
 109   1      
 110   1      //    SDA = 0;                         // Send ACK
 111   1      //    _nop_();
 112   1      //    SCL = 1;
 113   1      //    _nop_();
 114   1      //    SCL = 0;
 115   1          return dat;
 116   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              08/31/2023 16:34:47 PAGE 3   

 117          
 118          
 119          
 120          void EEPROM_WriteByte(uchar address, uchar Data) {
 121   1          
 122   1      
 123   1          I2C_Start();
 124   1          I2C_Write(EEPROM_ADDRESS);
 125   1         // I2C_Write(EEPROM_ADDRESS | ((page_address & 0x07) << 1));
 126   1          I2C_Write(address);
 127   1          I2C_Write(Data);
 128   1          I2C_Stop();
 129   1        delay_ms(10);
 130   1      }
 131          
 132          
 133          void EEPROM_Write4Bytes(uchar address, ulong value) {
 134   1          
 135   1          uchar i;
 136   1          for (i = 0; i < 4; i++) {
 137   2              EEPROM_WriteByte(address + i, (value >> (i * 8)) & 0xFF);
 138   2          }
 139   1      }
 140          
 141          
 142          
 143          unsigned char EEPROM_ReadByte(uchar address) {
 144   1          
 145   1          uchar Data;
 146   1      
 147   1          I2C_Start();
 148   1          I2C_Write(EEPROM_ADDRESS);
 149   1          I2C_Write(address);
 150   1        
 151   1          I2C_Start();
 152   1          I2C_Write(0xA0);
 153   1          Data = I2C_ReadACK();
 154   1          I2C_Stop();
 155   1      
 156   1          return Data;
 157   1      }
 158          
 159          ulong EEPROM_Read4Bytes(uchar address) {
 160   1          ulong value = 0;
 161   1          uchar i;
 162   1          for (i = 0; i < 4; i++) {
 163   2              value |= ((ulong)EEPROM_ReadByte(address + i)) << (i * 8);
 164   2          }
 165   1          return value;
 166   1        }
 167          
 168          
 169          void displaynumber(ulong value){
 170   1        uchar digitPatterns[] = {
 171   1          0x3F, // 0b00111111 - 0
 172   1          0x06, // 0b00000110 - 1
 173   1          0x5B, // 0b01011011 - 2
 174   1          0x4F, // 0b01001111 - 3
 175   1          0x66, // 0b01100110 - 4
 176   1          0x6D, // 0b01101101 - 5
 177   1          0x7D, // 0b01111101 - 6
 178   1          0x07, // 0b00000111 - 7
C51 COMPILER V9.60.7.0   MAIN                                                              08/31/2023 16:34:47 PAGE 4   

 179   1          0x7F, // 0b01111111 - 8
 180   1          0x6F  // 0b01101111 - 9
 181   1      
 182   1      };
 183   1        
 184   1          uchar digits[4];                                              // Array to store individual digits
 185   1          
 186   1                                                               // Extract individual digits from the 4-byte valu
             -e
 187   1          digits[0] = value % 10;
 188   1          digits[1] = (value / 10) % 10;
 189   1          digits[2] = (value / 100) % 10;
 190   1          digits[3] = (value / 1000) % 10;
 191   1      
 192   1      
 193   1      
 194   1          disp_1 = 0; disp_2 = 1; disp_3 = 1; disp_4 = 1;
 195   1      
 196   1          P0 = digitPatterns[digits[3]];
 197   1          delay_ms(1000);
 198   1      
 199   1      
 200   1          disp_1 = 1; disp_2 = 0; disp_3 = 1; disp_4 = 1;
 201   1          P0 = digitPatterns[digits[2]];
 202   1          delay_ms(1000);
 203   1      
 204   1          disp_1 = 1; disp_2 = 1; disp_3 = 0; disp_4 = 1;
 205   1          P0 = digitPatterns[digits[1]];
 206   1          delay_ms(1000);
 207   1      
 208   1          disp_1 = 1; disp_2 = 1; disp_3 = 1; disp_4 = 0;
 209   1          P0 = digitPatterns[digits[0]];
 210   1          delay_ms(1000);
 211   1      
 212   1          // Turn off all displays
 213   1              disp_1 = 1;
 214   1              disp_2 = 1;
 215   1              disp_3 = 1;
 216   1              disp_4 = 1;
 217   1      
 218   1           delay_ms(1000);
 219   1            
 220   1              
 221   1        
 222   1      }
 223          
 224          void main() {
 225   1            
 226   1            lcd_init();
 227   1            I2C_Init();
 228   1            
 229   1            countValue = EEPROM_Read4Bytes(0x00); 
 230   1            lcd_set_cursor(0,1);
 231   1            lcd_write_string("reading");
 232   1            lcd_write_data(countValue);
 233   1        
 234   1          while(1){
 235   2            unsigned long value;
 236   2            
 237   2            displaynumber(countValue);
 238   2            countValue++;
 239   2            //lcd_write_string();
C51 COMPILER V9.60.7.0   MAIN                                                              08/31/2023 16:34:47 PAGE 5   

 240   2            EEPROM_Write4Bytes(0x00, countValue);
 241   2           //EEPROM_Write4Byte(0x01, counterLow);
 242   2            lcd_set_cursor(1,0);
 243   2            lcd_write_string("writing");
 244   2            lcd_write_data(countValue);
 245   2      
 246   2       delay_ms(1000);
 247   2      
 248   2        }
 249   1      }
*** WARNING C280 IN LINE 235 OF main.c: 'value': unreferenced local variable
 250          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    623    ----
   CONSTANT SIZE    =     26    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
