#include <reg51.h>
#include <stdio.h>
#include <string.h>
#include <intrins.h>
#include "lcd.h"

//#define  buzzer P1        // Define a bit for the buzzer

sbit Servo_motor_Pin = P2^0; // Define a bit for the servo motor control pin
sbit column1 = P1^0; // Define columns of the 4x4 keypad
sbit column2 = P1^1;
sbit column3 = P1^2;
sbit column4 = P1^3;

sbit row1 = P1^4; // Define rows of the 4x4 keypad
sbit row2 = P1^5;
sbit row3 = P1^6;
sbit row4 = P1^7;

unsigned char time_string[6];
unsigned char cursor_position = 10;

char keypad[4][4] = {
    {'D', '=', '0', 'C'},
    {'C', '9', '8', '7'},
    {'B', '6', '5', '4'},
    {'A','3','2', '1'}
};


char timestring;

char key_press() {
    char key = 0;
    row1 = 0; row2 = 1;row3 = 1;row4 = 1;
    if (column1 == 0) key = keypad[0][0];
    if (column2 == 0) key = keypad[0][1];
    if (column3 == 0) key = keypad[0][2];
    if (column4 == 0) key = keypad[0][3];
    row1 = 1; // Disable the first row
    
    row1 = 1;   row2 = 0;   row3 = 1;    row4 = 1;

    if (column1 == 0) key = keypad[1][0];
    if (column2 == 0) key = keypad[1][1];
    if (column3 == 0) key = keypad[1][2];
    if (column4 == 0) key = keypad[1][3];
	
    row2 = 1;   row1 = 1;    row2 = 1;    row3 = 0;     row4 = 1;
  
    if (column1 == 0) key = keypad[2][0];
    if (column2 == 0) key = keypad[2][1];
    if (column3 == 0) key = keypad[2][2];
    if (column4 == 0) key = keypad[2][3];
		
    row3 = 1;  row1 = 1;    row2 = 1;    row3 = 1;    row4 = 0;
		
    if (column1 == 0) key = keypad[3][0];
    if (column2 == 0) key = keypad[3][1];
    if (column3 == 0) key = keypad[3][2];
    if (column4 == 0) key = keypad[3][3];
    row4 = 1; // Disable the fourth row
		
		delay_ms(100);
		P1 = 0xFF;
    return key;
}

	
void display_key(unsigned char digit, unsigned int position){
	
				lcd_set_cursor(1,position);
				lcd_write_data(digit);
				delay_ms(100);
}

void display_time() {
    lcd_set_cursor(1, 1); // Set cursor to the second row, first column
    lcd_write_string(time_string);

    if (cursor_position == 0) {
        lcd_cursor_on();  // Turn on cursor at 'a' position
        lcd_cursor_blink(); // Make the cursor blink
    } else {
        lcd_cursor_off();  // Turn off cursor at other positions
    }
}

// Function to decrement time by 1 second
void decrement_time() {
    unsigned char sec0 = time_string[6] - '0';
    unsigned char sec1 = time_string[7] - '0';
    unsigned char min0 = time_string[3] - '0';
    unsigned char min1 = time_string[4] - '0';

    if (sec1 == 0) {
        if (sec0 == 0) {
            if (min1 == 0) {
						
                if (min0 == 0) {
                                                              // Time is already 00:00, stop the oven
                    oven_started = 0;
                }
								
								else {
                                                         // Decrement the minute and set seconds to 59
                    min0--;
                    sec0 = 9;
                }
								
						}
						else {
                                                   // Decrement the second digit of the minute and set seconds to 59
                min1--;
                sec0 = 9;
            }
        }
				else {
            sec1 = 5;                        // Decrement the second digit of the second and set the first digit to 0
            sec0--;
        }
    }
		else {
                                                // Decrement the second digit of the second
        sec1--;
    }

    // Update the time_string
    time_string[6] = sec0 + '0';
    time_string[7] = sec1 + '0';
    time_string[3] = min0 + '0';
    time_string[4] = min1 + '0';
}

void main()
{
	unsigned int index = 0;
	unsigned char key_count = 0;
  unsigned char key;	
	unsigned char min0,min1,sec0,sec1;
	
	lcd_init();
	
	lcd_clear();
	lcd_set_cursor(0,1);
	lcd_write_string("oven controll");
	lcd_set_cursor(1,6);
	lcd_write_string("00:00");
				
			
   while (1) {
		 
        
		 key = key_press(); // Get a key press from the keypad
		 
        if (key != '\0' && key_count <= 4) {
					
            key_count++;
					
            if (key_count == 1) {
							
							  sec0 = key;
							  display_key(sec0,cursor_position);
						
            }
						
						else if (key_count == 2){
							
							  sec1 = key;
							  display_key(sec1,cursor_position);
							  display_key(sec0,cursor_position-1);
							
							}
						
						else if (key_count == 3){
							
								min0 = key;
								display_key(min0,cursor_position);
							  display_key(sec1,cursor_position-1);
						    display_key(sec0,cursor_position -3);
							
							}
						
						else if (key_count == 4){
							
			          min1 = key;
							  display_key(min1,cursor_position);
							  display_key(min0,cursor_position-1);
							  display_key(sec1,cursor_position-3);
							  display_key(sec0,cursor_position-4);
							}
				}
				
//	    if (key == "="){sec0 = sec1 = min0 = min1 = 0x00; break;} 
			
	    if (key == '=') {
				
            if (oven_started) {
                oven_started = 0;             // Pause the oven
            }
						else {
                oven_started = 1;                // Start the oven
            }
        }

        if (oven_started) {

  					decrement_time();
            display_time();
        }
    }
	 delay_ms(200);
}
